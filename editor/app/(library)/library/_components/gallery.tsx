"use client";

import React from "react";
import { Masonry } from "masonic";
import type { Library } from "@/lib/library";
import { getBlurDataURLFromColor } from "@/utils/placeholder";
import { Button } from "@/components/ui/button";
import { DownloadIcon } from "@radix-ui/react-icons";
import Image from "next/image";
import Link from "next/link";
import { SparklesIcon } from "lucide-react";
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from "@/components/ui/tooltip";

type ObjectDetail = Library.Object & {
  url: string;
  download: string;
  author: Library.Author | null;
};

export default function Gallery({
  objects,
  empty = (
    <div className="w-full h-full min-h-96 flex items-center justify-center text-center text-muted-foreground">
      <span>No results found.</span>
    </div>
  ),
}: {
  objects?: ObjectDetail[] | null;
  empty?: React.ReactNode;
}) {
  return (
    <div className="w-full min-h-96">
      {objects?.length === 0 && empty}
      {objects && objects.length > 0 && (
        <Masonry
          columnGutter={16}
          rowGutter={16}
          maxColumnCount={6}
          items={objects}
          itemKey={(data) => data.id}
          render={({ data }) => (
            <Link
              key={data.id}
              href={`/library/o/${data.id}`}
              className="group transition-all"
            >
              <ImageCard object={data} />
            </Link>
          )}
        />
      )}
    </div>
  );
}

function ImageCard({ object }: { object: ObjectDetail }) {
  const text =
    object.description || object.alt || object.title || object.prompt;

  return (
    <div className="group relative overflow-hidden rounded-lg">
      <Image
        src={object.url}
        alt={
          object.alt ||
          object.description ||
          object.title ||
          object.prompt ||
          object.category
        }
        width={object.width}
        height={object.height}
        placeholder={object.color ? "blur" : undefined}
        blurDataURL={
          object.color ? getBlurDataURLFromColor(object.color) : undefined
        }
        className="w-full object-cover"
      />
      <div className="absolute inset-0 bg-black/60 text-white opacity-0 group-hover:opacity-100 transition-opacity duration-300 p-4">
        <div className="w-full h-full flex flex-col justify-between">
          <div>
            {object.generator && (
              <div>
                <Tooltip delayDuration={10}>
                  <TooltipTrigger>
                    <SparklesIcon className="size-3" />
                  </TooltipTrigger>
                  <TooltipContent>
                    This image is generated by {object.generator}
                  </TooltipContent>
                </Tooltip>
              </div>
            )}
          </div>
          <div>
            <p className="text-xs line-clamp-2 opacity-80">{text}</p>
            {object.author && (
              <Link
                href={object.author.blog ?? "#"}
                target="_blank"
                rel="noopener noreferrer"
                className="text-xs underline mt-2"
              >
                @{object.author.name}
              </Link>
            )}
            <div className="mt-4 flex justify-between items-center">
              <Tooltip delayDuration={10}>
                <TooltipTrigger>
                  <span className="text-[8px] opacity-80">
                    {object.license}
                  </span>
                </TooltipTrigger>
                <TooltipContent>
                  Free for commercial use, no attribution required.
                </TooltipContent>
              </Tooltip>
              <Link href={object.download} download>
                <Button variant="ghost">
                  <DownloadIcon className="size-4 mr-2" />
                  Download
                </Button>
              </Link>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
